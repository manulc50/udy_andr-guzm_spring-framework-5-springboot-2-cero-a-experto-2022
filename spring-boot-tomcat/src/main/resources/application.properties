# Puerto donde va a arrancar el servidor tomcat interno de Spring Boot
server.port: 8090

# Personalizamos los parámetros por defecto de conexión a la base de datos MySQL
# Direccion donde se encuentra la base de datos(host:puesto/nombre_base_datos)
# Para evitar un error en la ejecución de la aplicación relacionado con el "Timezone",es necesario añadir a esta url o path el parámetro "serverTimezone" con el valor de la zona horaria donde nos encontramos("Europe/Madrid")
# Para evitar otros errores que pueden aparecer en la ejecución de la aplicacón relacionados con el "Public Key Retrieval" y el uso de SSL,hay que indicar en esta url o path los parámetros "allowPublickeyRetrieval=true" y "useSSL=false"
spring.datasource.url: jdbc:mysql://localhost:3306/db_springboot?serverTimezone=Europe/Madrid&allowPublickeyRetrieval=true&useSSL=false
# Usuario de acceso a la base de datos
spring.datasource.username=root
# Clave del usuario
spring.datasource.password=root
# Driver para conexiones con MySQL
spring.datasource.driver-class-name:com.mysql.cj.jdbc.Driver
# Configuramos el dialecto para la versión 8 de MySQL,que es la que tenemos instalada.Para las versiones 5.5 y 5.7 sería "org.hibernate.dialect.MySQL55Dialect" y "org.hibernate.dialect.MySQL57Dialect" respectivamente
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
#Propiedad que permite eliminar y crear las tablas en la base de datos automaticamente cuando se arracnca la aplicacion 
spring.jpa.hibernate.ddl-auto=create-drop
#Propiedad que habilita mostrar en consola las sentencias nativas de SQL que se producen por detrás
logging.level.org.hibernate.SQL=debug

# Propiedad para establecer el tamaño máximo de los archivos que vamos a subir en el servidor
spring.servlet.multipart.max-file-size=10MB
# Propiedad para establecer el tamaño máximo de los archivos que viajan en la petición http
spring.servlet.multipart.max-request-size=10MB

#Se trata de una propiedad que maneja el ViewResolver para que podamos tener diferentes tipos de vistas para una misma ruta o url.Al habilitar esta propiedad,se agregra un parametro 'format' a la ruta o url de las vistas correspondientes y,en funcion de su valor, al final se va a una vista u otra
spring.mvc.contentnegotiation.favor-parameter=true
# Con esta propiedad,cuando le pasamos a la url el parámetro 'format',habilitado con la propiedad anterior 'favor-parameter=true',con valor "pdf",se modifica la cabecera de la respuesta con 'application/pdf'.
spring.mvc.contentnegotiation.media-types.pdf: application/pdf
# Con esta propiedad,cuando le pasamos a la url el parámetro 'format',habilitado con la propiedad anterior 'favor-parameter=true',con valor "xlsx",se modifica la cabecera de la respuesta con 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'.
# El media-type 'xlsx' hace referencia a la versión más moderna actualmente de xls(desde la de 2007 en adelante)
spring.mvc.contentnegotiation.media-types.xlsx: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
# Con esta propiedad,cuando le pasamos a la url el parámetro 'format',habilitado con la propiedad anterior 'favor-parameter=true',con valor "csv",se modifica la cabecera de la respuesta con 'text/csv'.
spring.mvc.contentnegotiation.media-types.csv: text/csv
# Con esta propiedad,cuando le pasamos a la url el parámetro 'format',habilitado con la propiedad anterior 'favor-parameter=true',con valor "xml",modifica la cabecera de la respuesta con 'application/xml'.Se puede omitir ya que Spring esta configurado automaticamente para tratar con este formato.
spring.mvc.contentnegotiation.media-types.xml: application/xml
# Con esta propiedad,cuando le pasamos a la url el parámetro 'format',habilitado con la propiedad anterior 'favor-parameter=true',con valor "json",modifica la cabecera de la respuesta con 'application/json'.Se puede omitir ya que Spring esta configurado automaticamente para tratar con este formato.
spring.mvc.contentnegotiation.media-types.json: application/json